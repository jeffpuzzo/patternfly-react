// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test creatable option (Enzyme - existing test) 1`] = `
<Select
  aria-describedby=""
  aria-invalid={false}
  aria-label=""
  aria-labelledby=""
  chipGroupComponent={null}
  className=""
  clearSelectionsAriaLabel="Clear all"
  createText="Create"
  customBadgeText={null}
  customContent={null}
  direction="down"
  favorites={Array []}
  favoritesLabel="Favorites"
  hasInlineFilter={false}
  hasPlaceholderStyle={false}
  inlineFilterPlaceholderText={null}
  inputIdPrefix=""
  isCreatable={true}
  isCreateSelectOptionObject={false}
  isDisabled={false}
  isGrouped={false}
  isInputFilterPersisted={false}
  isInputValuePersisted={false}
  isOpen={true}
  isPlain={false}
  menuAppendTo="inline"
  noResultsFoundText="No results found"
  onClear={[Function]}
  onCreateOption={[Function]}
  onFilter={null}
  onToggle={[MockFunction]}
  onTypeaheadInputChanged={null}
  ouiaSafe={true}
  placeholderText=""
  position="left"
  removeSelectionAriaLabel="Remove"
  selections={Array []}
  toggleAriaLabel="Options menu"
  toggleIcon={null}
  toggleId={null}
  typeAheadAriaLabel=""
  validated="default"
  variant="typeahead"
  width=""
>
  <GenerateId
    prefix="pf-random-id-"
  >
    <div
      className="pf-c-select pf-m-expanded"
      data-ouia-component-id="OUIA-Generated-Select-typeahead-2"
      data-ouia-component-type="PF4/Select"
      data-ouia-safe={true}
    >
      <SelectToggle
        aria-label="Options menu"
        aria-labelledby=" pf-select-toggle-id-11"
        className=""
        handleTypeaheadKeys={[Function]}
        hasClearButton={false}
        hasFooter={false}
        hasPlaceholderStyle={false}
        id="pf-select-toggle-id-11"
        isActive={false}
        isDisabled={false}
        isOpen={true}
        isPlain={false}
        menuRef={
          Object {
            "current": <ul
              aria-label=""
              class="pf-c-select__menu"
              role="listbox"
            >
              <li
                class="pf-c-select__menu-wrapper"
                id="select-option-16432252939213067zrqcdkn"
                role="presentation"
              >
                <button
                  class="pf-c-select__menu-item"
                  role="option"
                  type="button"
                >
                  Create
                   "
                  test
                  "
                </button>
              </li>
            </ul>,
          }
        }
        onClickTypeaheadToggleButton={[Function]}
        onClose={[Function]}
        onEnter={[Function]}
        onToggle={[Function]}
        parentRef={
          Object {
            "current": <div
              class="pf-c-select pf-m-expanded"
              data-ouia-component-id="OUIA-Generated-Select-typeahead-2"
              data-ouia-component-type="PF4/Select"
              data-ouia-safe="true"
            >
              <div
                class="pf-c-select__toggle pf-m-typeahead"
              >
                <div
                  class="pf-c-select__toggle-wrapper"
                >
                  <input
                    aria-label=""
                    autocomplete="never"
                    class="pf-c-form-control pf-c-select__toggle-typeahead"
                    id="pf-select-toggle-id-11-select-typeahead"
                    placeholder=""
                    type="text"
                    value="test"
                  />
                </div>
                <button
                  aria-expanded="true"
                  aria-haspopup="listbox"
                  aria-label="Options menu"
                  aria-labelledby=" pf-select-toggle-id-11"
                  class="pf-c-button pf-c-select__toggle-button pf-m-plain"
                  id="pf-select-toggle-id-11"
                  tabindex="-1"
                  type="button"
                >
                  <svg
                    aria-hidden="true"
                    class="pf-c-select__toggle-arrow"
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style="vertical-align: -0.125em;"
                    viewBox="0 0 320 512"
                    width="1em"
                  >
                    <path
                      d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                    />
                  </svg>
                </button>
              </div>
              <ul
                aria-label=""
                class="pf-c-select__menu"
                role="listbox"
              >
                <li
                  class="pf-c-select__menu-wrapper"
                  id="select-option-16432252939213067zrqcdkn"
                  role="presentation"
                >
                  <button
                    class="pf-c-select__menu-item"
                    role="option"
                    type="button"
                  >
                    Create
                     "
                    test
                    "
                  </button>
                </li>
              </ul>
            </div>,
          }
        }
        type="button"
        variant="typeahead"
      >
        <div
          className="pf-c-select__toggle pf-m-typeahead"
          onClick={[Function]}
          onKeyDown={[Function]}
        >
          <div
            className="pf-c-select__toggle-wrapper"
          >
            <input
              aria-activedescendant={null}
              aria-label=""
              autoComplete="never"
              className="pf-c-form-control pf-c-select__toggle-typeahead"
              disabled={false}
              id="pf-select-toggle-id-11-select-typeahead"
              onChange={[Function]}
              onClick={[Function]}
              placeholder=""
              type="text"
              value="test"
            />
          </div>
          <button
            aria-expanded={true}
            aria-haspopup="listbox"
            aria-label="Options menu"
            aria-labelledby=" pf-select-toggle-id-11"
            className="pf-c-button pf-c-select__toggle-button pf-m-plain"
            disabled={false}
            id="pf-select-toggle-id-11"
            onClick={[Function]}
            tabIndex={-1}
            type="button"
          >
            <CaretDownIcon
              className="pf-c-select__toggle-arrow"
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                className="pf-c-select__toggle-arrow"
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 320 512"
                width="1em"
              >
                <path
                  d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                />
              </svg>
            </CaretDownIcon>
          </button>
        </div>
      </SelectToggle>
      <ForwardRef
        aria-label=""
        aria-labelledby=""
        footerRef={
          Object {
            "current": null,
          }
        }
        isGrouped={false}
        isLastOptionBeforeFooter={[Function]}
        keyHandler={[Function]}
        openedOnEnter={false}
        position="left"
        sendRef={[Function]}
      >
        <SelectMenu
          aria-label=""
          aria-labelledby=""
          className=""
          footerRef={
            Object {
              "current": null,
            }
          }
          hasInlineFilter={false}
          innerRef={
            Object {
              "current": <ul
                aria-label=""
                class="pf-c-select__menu"
                role="listbox"
              >
                <li
                  class="pf-c-select__menu-wrapper"
                  id="select-option-16432252939213067zrqcdkn"
                  role="presentation"
                >
                  <button
                    class="pf-c-select__menu-item"
                    role="option"
                    type="button"
                  >
                    Create
                     "
                    test
                    "
                  </button>
                </li>
              </ul>,
            }
          }
          isCustomContent={false}
          isExpanded={false}
          isGrouped={false}
          isLastOptionBeforeFooter={[Function]}
          keyHandler={[Function]}
          maxHeight=""
          openedOnEnter={false}
          position="left"
          selected=""
          sendRef={[Function]}
        >
          <ul
            aria-label=""
            aria-labelledby={null}
            className="pf-c-select__menu"
            role="listbox"
          >
            <SelectOption
              className=""
              component="button"
              index={0}
              inputId="pf-random-id-1-0"
              isChecked={false}
              isDisabled={false}
              isFavorite={null}
              isFocused={null}
              isLastOptionBeforeFooter={[Function]}
              isLoad={false}
              isLoading={false}
              isNoResultsOption={false}
              isPlaceholder={false}
              isSelected={false}
              key=".$create test"
              keyHandler={[Function]}
              onClick={[Function]}
              sendRef={[Function]}
              setViewMoreNextIndex={[Function]}
              value="test"
            >
              <li
                className="pf-c-select__menu-wrapper"
                id="select-option-16432252939213067zrqcdkn"
                role="presentation"
              >
                <button
                  aria-selected={null}
                  className="pf-c-select__menu-item"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  role="option"
                  type="button"
                >
                  Create
                   "
                  test
                  "
                </button>
              </li>
            </SelectOption>
          </ul>
        </SelectMenu>
      </ForwardRef>
    </div>
  </GenerateId>
</Select>
`;
